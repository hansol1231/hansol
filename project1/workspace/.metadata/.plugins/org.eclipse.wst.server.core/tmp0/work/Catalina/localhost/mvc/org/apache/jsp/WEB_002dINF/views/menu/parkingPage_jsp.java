/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2020-02-25 13:07:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.menu;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class parkingPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/menu/../layout/footer.jsp", Long.valueOf(1582622365000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");

      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../layout/header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("주차 안내 페이지", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=735685ac942446d3e4c20bea3b26d1c2\"></script>\r\n");
      out.write("<div class=\"parking_img\">\r\n");
      out.write("    <h1>상암월드컵 경기장 주차장</h1>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"parking_text\">\r\n");
      out.write("    <h4>서울월드컵경기장의 주차장은 서쪽에 위치한 경기장 주차장과 동쪽에 위치한 홈플러스 주차장 2곳이 있으며<br>이용 시설에 따라 해당 주차장을 이용하셔야만 할인 혜택을 받으실 수 있습니다</h4>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"map2_text\">\r\n");
      out.write("    <h1>평화공원 주차장</h1>\r\n");
      out.write("    <br>\r\n");
      out.write("    <h2>주차대수</h2>\r\n");
      out.write("    <h3>1,162대 주차</h3>\r\n");
      out.write("    <br>\r\n");
      out.write("    <h2>이용시간</h2>\r\n");
      out.write("    <h3>10분당 300원, 행사시 4시간 5,000원</h3>\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"map2\" class=\"map2\"></div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    var position = new daum.maps.LatLng(37.565625, 126.894675);\r\n");
      out.write("    var map = new daum.maps.Map(document.getElementById('map2'), {\r\n");
      out.write("        center: position,\r\n");
      out.write("        level: 4,\r\n");
      out.write("        mapTypeId: daum.maps.MapTypeId.ROADMAP\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    var marker = new daum.maps.Marker({\r\n");
      out.write("        position: position\r\n");
      out.write("    });\r\n");
      out.write("    marker.setMap(map);\r\n");
      out.write("\r\n");
      out.write("    var iwContent = '<p style=\"width:200px\"><b>평화의공원 주차장</b><br>서울특별시 마포구 성산동</p>';\r\n");
      out.write("    iwPosition = new daum.maps.LatLng(37.565625, 126.894675);\r\n");
      out.write("    iwRemoveable = true;\r\n");
      out.write("\r\n");
      out.write("    var infowindow = new daum.maps.InfoWindow({\r\n");
      out.write("        position: iwPosition,\r\n");
      out.write("        content: iwContent,\r\n");
      out.write("        removable: iwRemoveable\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    daum.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("        // 마커 위에 인포윈도우를 표시합니다\r\n");
      out.write("        infowindow.open(map, marker);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    var zoomControl = new daum.maps.ZoomControl();\r\n");
      out.write("    map.addControl(zoomControl, daum.maps.ControlPosition.RIGHT);\r\n");
      out.write("    var mapTypeControl = new daum.maps.MapTypeControl();\r\n");
      out.write("    map.addControl(mapTypeControl, daum.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"footer\" style=\"position: absolute; width: 100%;\">\r\n");
      out.write("    <h4>약관 | 개인정보 | 저작권</h4>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
